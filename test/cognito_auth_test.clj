(ns cognito-auth-test
  (:require [cognito :as c]
            [buddy.core.codecs :as codecs :refer [to-bytes bytes->hex bytes->str hex->bytes]]
            [clojure.test :refer :all])
  (:import [java.math BigInteger]))


;;;;;;;;;; The Tests ;;;;;;;;;;

#_(deftest test-small-a
  (is (< c/small-a c/big-a)))


(deftest test-get-secret-hash
  (let [{:keys [client-id client-secret]} c/user-pool-config
        hash (c/get-secret-hash "c16b95a0-4081-70f4-ed0d-2ac9b19bc28d"  client-id client-secret)]
    (is (= "KdhHHXQhDnHPIrO6wiX2KRwtQr2DL2k56O7bUQ1k7HY=" hash))))

(deftest test-calculate-u
  (let [big-a (BigInteger. "1378838892563693802122760197025801003681637770785546409662687884121687709852790403254090068966182630000490809199249525126737415873498456211749714049632087724192881038018028377857247206342985199088405811078688254132816962083081907726806365122870004002713543745252386031217011714087194453656615671768760037548245246326498560595210484077885576399353573049192874927842007613551168606679964227695520859661542244713217344356133942463543981691481712745703693200916622571568058847764788742326304851208888040091435028643191531856390935510779913190566386732855217443419569844055795793360920862103924061388117040954995803363390695579131307240201285774667071650968149355439805462798191380186575877503672607907173002488620056463220667881623595149618242824999035722957416715124372645830088988075018395630340817714869212199813792207836243984226958406499650082221349207059615208169880810088129589850834006743992299865390933913807194976532027")
      big-b (BigInteger. "4131160333304290196488399782573685910350880111915391790329814699756433672103041825622905411832763356765056582963704909463200146455401487238167249765373303327745099696174666826753077645335817165003211903766139309637395753324236207813226790329104698493454044534480128942139639949135149415907991241910137324086247487743173048581373597693066707293674558348301672379901428480599590048636717609838814554136612577247590843798869878375872559942410122429549971857028212252920250088473429350626315109654731234160732557381586015285397895874929433450938423596236525737459925096802030097085022258528154674569099757812301978368360904791493434449191826951711933314797359361624779703932814524485644690457262349300873989942116136812633855087090943072654448333312159486104365702340483773200723681754794978821284176621564631855640105590666872378699749238231403351649586084164089753265593428996991779037937949803482641476272531648092560478109021")
        u (c/calculate-u big-a big-b)]
    (is (= "68563710070237785636057097442852025557948351532866567573443367080442953807842" (str u)))))

(deftest test-get-password-authentication-key
  (let [user-pool-id "us-east-2_INzuX7Ms0"
        user-id-for-srp  "c16b95a0-4081-70f4-ed0d-2ac9b19bc28d"
        password (:PASSWORD c/user-pool-config)
        small-a (BigInteger. "143507156978358453305637140473061525832865320324719526376057439684013052936498795920877989983596407717960277275699837047456010586120212379461106842133925746254295241903783107057073882984968396422658503330093265915853717883570905909224699180942897048774581729467435709441280122433674500229060840941003179594943")
        big-a (BigInteger. "136437336843087163536820156729049150391648502971663096606431464669935602737867712934071045686517343003405365529460032801851482227316677944336190940132793194679667780612017029714580442420576302013156960228644073974088588825168469198877821451683006011271852506010536710355059096013945318353703655782060579312734340462176502746974165712584821937631954955940823435165390062070808804872788815437879044908431419001139698108187992533343532491506941490052292569948190559385657909442642753028597900749132077101097555861613549278371579190390012379498392320316155041351631766948867643541192204922284338648399478672904532500688858006608172469471591809058310993524184625989985367133296099679062521347105073512863894925354713042128884809438360591855068619650030144108728347346359087224300684996801580512753503568294316413347001137371033462355884880315232290782448883804317025302360443915151489412012374047290563618940301823468557578337610")
        big-b (BigInteger. "503864707298781700319031622717462852399666978184105746230378504136547263550806909540496504188898173583823468837399156491056271539121819944874270029945874442841498667773451501418223736048380435075980617992369407187628147715528324205112294799100576580886285611680968807171970647586222488748873258078779403357807957731522046566923197923297834803380358675936676626778323095379743073648574517420351078895726668949867201307393170771235526817889231370733784619299328872097521379056806404537726224699596717165451084317949331760507459226530961340303283057953278443988038801499081744225527992930210747776168772483276518160572965106283481602982968204541493461941707478489550800040236435305211348108281028256377428739406840761181524124411548935041149516381666907005549910635787415100372633029918308092488053906840728388472163664242115756765353667914559877915751718223317484090150191298380835214113021600611426848971760423340958314646614")
        salt-hex "67c4a32d53ce3ce23d205a7bc174fa67"
        pwd-auth-key (c/get-password-authentication-key user-pool-id, user-id-for-srp password small-a big-a big-b salt-hex)]
    (is (= "4a2e93a5ad766cd96b0f47cd79f1d728" (bytes->hex pwd-auth-key)))))


(deftest test-compute-hkdf
  (let [s-value (BigInteger. "692500301216911809927568799741497637327304004629630410919549608308785167434182082693646747216799766208771742467014892392271191999444652212434605343207138119065649553065440141440559135108110796349911589927048546389678451644992907504868970766915135634712169229688264956728932766735398100775603256282542421742075693147654865742958071579422497709512154353149508256381121339330267792016019040923961981098117242108251795306825581940310632826547369431291645895507789432790430314953572059189908866814498755831317144264907199936553238447749894549983498883479525344901409000995850963536691814313237347781529417116541942906560116154848615459775266996201025843097559299326205719555470204114271211519378936857463230033267131584292389332224382196192802438304933416595749836435279038639852771749519033120730420477979055566697864654136909570931249857779823984460128143232805126065006173921176420549196566917081119319540673798013679313913301")
        u-value (BigInteger. "30461591005555428391968414225196473670776386404248612478484443561396789476114")
        hkdf (c/compute-hkdf
                  (hex->bytes (c/pad-hex (bytes->hex (.toByteArray s-value))))
                  (hex->bytes (c/pad-hex (bytes->hex (.toByteArray u-value)))))]
    ;; agrees with in pycognito
    (is (= "877499180283e89e34ea53dd77ec3f0b" (bytes->hex hkdf)))))



(deftest test-get-auth-params
  "from pycognito this verifies the conplete SRP_A initial submission given a small-a (i.e. the random seed)"
  (let [small-a (BigInteger. "9030573451156746052094056991717777238255647416322967163076840813928423241308016828879721546506852136864127286388092588037357007861598680523858420441243776870289037318317420953962338600394578741041726702637610993678680219249975706970792475305427833212700703663539155127498587000713034826019570807896634840910")
        big-a (.modPow c/g small-a c/big-n)
        auth-params (-> c/user-pool-config
                        (assoc :small-a small-a)
                        c/init-srp-parameters
                        :init-auth-params)
        py-cognito-auth-params {"ClientId" "hubekaq48puviiu82akhrvu0m",
                                "AuthFlow" "USER_SRP_AUTH",
                                "AuthParameters"{"USERNAME" "openvest@gmail.com",
                                                 "SRP_A"
                                                 "772826373520b773ac821e8544c89cc871e72f4c78c391b88cf78eea5bd7f62029b1dbd0871a1255aed77714b29d83038049fdc5e68aa0f93c925c32a1a9a7b85fe81d2a8e0e0c2d5190284b5c16c11aa3ad95468b145ca693db00d6a1ad46203d55013c4bef30abd43a829c270bbcf061c7214b0358ea94dd5e1ce5de9a7508034a072aefed6cea035ade45b9f795c62297b3a182582cfb3ccae27ca3451a432cc3e6531658296229cdedc9bba377232ce156810c7f30e24b1bff5ef7947525974dd65acfa814a8167e92a9a950c354d113a8e4822a2c7e1db5fc5f5d1abe4457734af83dcf18191682023ad56a8a4afec4282679567d2ea59c7d384aad5c6c813757e956dd1e7c36581c9b6268924c63fe1a4585b032e53388051bba57afebb1e363d0fb0ee8c92f0794c9ea11e277b55f5cac5a66945922cee5defb863d18d3f7d65f39ac2b93cae44a1b6de3567a3bd897c61f23d5d45abbc65e5e8666852e0977b56bd417d1f6be6ebc3b9f8012883a131d382fab9c2b03bf68d1f176e9",
                                                 "SECRET_HASH" "Tds2PJ7XWkWkX5jjYvk+mMqxi/JDRtjUMROCfFgNgkY="}} ]
    (is (= py-cognito-auth-params auth-params))))

(deftest test-process-challenge
  ;; let's keep the timestamp from changing when we create the hashes
  (with-redefs [c/get-timestamp (constantly "Wed Jun 7 20:04:25 UTC 2023")]
   (let [small-a (BigInteger. "9030573451156746052094056991717777238255647416322967163076840813928423241308016828879721546506852136864127286388092588037357007861598680523858420441243776870289037318317420953962338600394578741041726702637610993678680219249975706970792475305427833212700703663539155127498587000713034826019570807896634840910")
         pycognito-processed {"TIMESTAMP" "Wed Jun 7 20:04:25 UTC 2023",
                              "USERNAME" "c16b95a0-4081-70f4-ed0d-2ac9b19bc28d",
                              "PASSWORD_CLAIM_SECRET_BLOCK" "EIPIsRuoGCCM7iiY9519E7zV9ZCtzG0S6KDFZuoPmiiPCma2/+rMtSISi3cvE5XXemEFAd0txaFXqux4ghpPpXahKAjb02o+uggbrS69zeReQxCRucx6mE23qKPazCbAEGBIwtNPoqjxXcdy7RXSsOVKgzDkl0XMwTFFl8aZIN2NZdn50VPhFaGVmXm3uideFqZnLEFJVcHIrnAz7gjIz1bvVtG/uxPXxrForU8paJfQU6vFnI8c/ODEAuXQPtvzoCyu10M/wjMww7zB0hQktXAQUYILabvbfW9fFeySBis1+LUrah0w1zR2EuvWE9bCioGEjshCX+Vly6TxC62H0QALRCErluHcTMSCN36KtJLACwjWH1FcBV9blzaOWTDxMr2l2FbU0yiICc/agGyADFG1iaoJ50yRAm3lFXqxEFwlYAok1zsqTv8adX7cLqjq/kwiDZkGBNvhC7brVkn1wIRzI2YRWvqSfxAXXwmW6K8jUlZpA+P8/OauLrS6A929Y4B3jnnLizmbIPsQOAEIB7ylh9oC/8IhIP+sxMeJjHkyR7tY08PkCef+vEPGiS1pC4GpjYb+HT48ZjZV+5L2JQjHgDRUM4WpdeT1ir2ve8v/7i8QisaW3KIwMQ6i3tmd4O5nlRnFUIXLitXDRGotJctYqrT5mrGzxktupu3UKxVG14qXG4xIMZrre1LIm9z2V278+xALVDp7RIn5I/1jr0ZGovDij83Ws2kddiQdNSMZJgu+AZ2TIo2XGNgBzApIL6WGfdVn44rYI8AMarpszcDhBrf7j0pZkza9m29lBXzv4hUQFHQA/mP07ACYuoUpfMUJl3GDvrajlSZmTGFivo1lk16oGtLNrlGzyYiphQ5Igf31+0AGQz0E0ghfHeSr/1ElobKqLeCjoD8oa0V71yPV5OcxFaIWSXmRPlVyqP4DD7eTtwnbABeoQbmCF87oZJ/8tRPVOtviJczQFNUg5/wB3OdL4+Gs4XMLe5cS+yk9HZEGd/8OxEdL0VfT0ernRWEwyT4lrZHEEuAfbcomGtBvai3xW0zBXGZ2P5dAHOTISV6yLLzJm54EH/w8cC5xXuALcSukFds+7RcTYusFufWdKuHfr2s2WA7K5OO4XVT4BlofnbvYx9FXukoXVB6rfiLPfREUQrsXJvdaZuBdz8eVOmCuCLD93JvNmTInk/k2jYvpySmgLqLlxlKCsY9HmLTIwpx+97UbBZfsSfMmx6fhdeVGK89ydQKMd0YR6egb4gN153F04sTgaF1+27SeOg5neCAWMwuho99+cXv57gRaTxpFGJTITwjZHGl2Os/cKAe6ZxwPpWUpKBtYNqPSnxl9yNQmVpr2MybI4ouDSOYEZKaAUjWwTUJAmzVifsrz+jfMky2/m/LpasmghCMdlUCofUD2UYuuIY7PA9mOZpQ9JqRqPyQMCQPntALjbVwy5cxfkzCPyIk92LGB/0iteM3dTfOiSYwg31HUj9V16wDJoYNxI82kgwOypN3NsJUGJU2tUa16Vsk/LiHUYZxut/Ym7jUE7iVEzDamOB4ndwfRt2mP1erB9cxwjT/XiwJ7Jy3bqF94XOX9y/oCh64y3abeAB9nfYoKsYhC/Lxf0KaaoyszaqirgTjfVAuZBHpBmmxg9fim2QX5hZXVjw+3pXl+5BHDrSLm9aT5JZ8PTUEM8TnyuLbYxV5iE8l1GrWn16I1y7ZYaeilYA==",
                              "PASSWORD_CLAIM_SIGNATURE""ifbT3virNAUbh4gshnJLxlB+79hk9ZsKGzcp4zjRN2s="}
         processed   (-> c/user-pool-config-public
                         (assoc :small-a (BigInteger. "9030573451156746052094056991717777238255647416322967163076840813928423241308016828879721546506852136864127286388092588037357007861598680523858420441243776870289037318317420953962338600394578741041726702637610993678680219249975706970792475305427833212700703663539155127498587000713034826019570807896634840910"))
                         c/init-srp-parameters ;; this sets big-a
                         (assoc :auth-challenge {:ChallengeName "PASSWORD_VERIFIER" 
                                                 :ChallengeParameters
                                                 {:SALT "67c4a32d53ce3ce23d205a7bc174fa67",
                                                  :SECRET_BLOCK "EIPIsRuoGCCM7iiY9519E7zV9ZCtzG0S6KDFZuoPmiiPCma2/+rMtSISi3cvE5XXemEFAd0txaFXqux4ghpPpXahKAjb02o+uggbrS69zeReQxCRucx6mE23qKPazCbAEGBIwtNPoqjxXcdy7RXSsOVKgzDkl0XMwTFFl8aZIN2NZdn50VPhFaGVmXm3uideFqZnLEFJVcHIrnAz7gjIz1bvVtG/uxPXxrForU8paJfQU6vFnI8c/ODEAuXQPtvzoCyu10M/wjMww7zB0hQktXAQUYILabvbfW9fFeySBis1+LUrah0w1zR2EuvWE9bCioGEjshCX+Vly6TxC62H0QALRCErluHcTMSCN36KtJLACwjWH1FcBV9blzaOWTDxMr2l2FbU0yiICc/agGyADFG1iaoJ50yRAm3lFXqxEFwlYAok1zsqTv8adX7cLqjq/kwiDZkGBNvhC7brVkn1wIRzI2YRWvqSfxAXXwmW6K8jUlZpA+P8/OauLrS6A929Y4B3jnnLizmbIPsQOAEIB7ylh9oC/8IhIP+sxMeJjHkyR7tY08PkCef+vEPGiS1pC4GpjYb+HT48ZjZV+5L2JQjHgDRUM4WpdeT1ir2ve8v/7i8QisaW3KIwMQ6i3tmd4O5nlRnFUIXLitXDRGotJctYqrT5mrGzxktupu3UKxVG14qXG4xIMZrre1LIm9z2V278+xALVDp7RIn5I/1jr0ZGovDij83Ws2kddiQdNSMZJgu+AZ2TIo2XGNgBzApIL6WGfdVn44rYI8AMarpszcDhBrf7j0pZkza9m29lBXzv4hUQFHQA/mP07ACYuoUpfMUJl3GDvrajlSZmTGFivo1lk16oGtLNrlGzyYiphQ5Igf31+0AGQz0E0ghfHeSr/1ElobKqLeCjoD8oa0V71yPV5OcxFaIWSXmRPlVyqP4DD7eTtwnbABeoQbmCF87oZJ/8tRPVOtviJczQFNUg5/wB3OdL4+Gs4XMLe5cS+yk9HZEGd/8OxEdL0VfT0ernRWEwyT4lrZHEEuAfbcomGtBvai3xW0zBXGZ2P5dAHOTISV6yLLzJm54EH/w8cC5xXuALcSukFds+7RcTYusFufWdKuHfr2s2WA7K5OO4XVT4BlofnbvYx9FXukoXVB6rfiLPfREUQrsXJvdaZuBdz8eVOmCuCLD93JvNmTInk/k2jYvpySmgLqLlxlKCsY9HmLTIwpx+97UbBZfsSfMmx6fhdeVGK89ydQKMd0YR6egb4gN153F04sTgaF1+27SeOg5neCAWMwuho99+cXv57gRaTxpFGJTITwjZHGl2Os/cKAe6ZxwPpWUpKBtYNqPSnxl9yNQmVpr2MybI4ouDSOYEZKaAUjWwTUJAmzVifsrz+jfMky2/m/LpasmghCMdlUCofUD2UYuuIY7PA9mOZpQ9JqRqPyQMCQPntALjbVwy5cxfkzCPyIk92LGB/0iteM3dTfOiSYwg31HUj9V16wDJoYNxI82kgwOypN3NsJUGJU2tUa16Vsk/LiHUYZxut/Ym7jUE7iVEzDamOB4ndwfRt2mP1erB9cxwjT/XiwJ7Jy3bqF94XOX9y/oCh64y3abeAB9nfYoKsYhC/Lxf0KaaoyszaqirgTjfVAuZBHpBmmxg9fim2QX5hZXVjw+3pXl+5BHDrSLm9aT5JZ8PTUEM8TnyuLbYxV5iE8l1GrWn16I1y7ZYaeilYA==",
                                                  :USER_ID_FOR_SRP "c16b95a0-4081-70f4-ed0d-2ac9b19bc28d",
                                                  :USERNAME "c16b95a0-4081-70f4-ed0d-2ac9b19bc28d",
                                                  :SRP_B "cbb9f672764ff8800b2854b307d213ce979989d1c3cb2f34a14ea2141d2b3332d4ae7107e74080dc9e1d0cbfda438e9e550f3d4c34443f12b05e645bf3e5b9cd873e7ef3fbb2ac2405b4682bc6bcdb1644c9ea6861be1244ff4efc7ae3530984d08ca53fd1eef46a2a953df91c122118bf58b394613798c385d2ae2cca1155fda48d7c8373604ac672f798c9b938d92b31b92b0bde8da94ce42c8f265698c5e5e4264ef7f641aec7256d9bbd74cdf35ea374d2d9cc1eabb0d79871fabdde4314612ac6eb9685531cd5de94bce738d9e18fe572c060a56a552a8013874c5454793d3b3faface581fdc01b7d2ca5a52289b9dfce76712aecdffded1abc4a79611a8ff8b50550939d7128a47d7b01c07c6224260724f9a8bf2c5790764d2baf6f547d73ca073ea3e15a819e0022dcdce9e8c49aaefd74bacc1c92d9779fdbac44cb28cda560f26ce2b977eef78ada7eaf1015ec5dafc35e88e49584cc526fe742a0948069679df7e392ee48615a2c7e1305574252a3ea81b43218d9217660634a56"}})
                         c/process-challenge ;; this adds the sresponse to the data-bundle
                         :challenge-response
                         (get "ChallengeResponses"))]
     (is (= (pycognito-processed "USERNAME") (processed "USERNAME")))
     (is (= (pycognito-processed "PASSWORD_CLAIM_SECRET_BLOCK") (processed "PASSWORD_CLAIM_SECRET_BLOCK")))
     (is (= (pycognito-processed "PASSWORD_CLAIM_SECRET_SIGNATURE") (processed "PASSWORD_CLAIM_SECRET_SIGNATURE")))
     (is (= pycognito-processed processed)))))
